#!/usr/bin/env python3

import argparse
from termcolor import colored
import sys

from PaStA.EquivalenceClass import EquivalenceClass
from PaStA.PatchEvaluation import evaluate_patch_list
from PaStA.PatchStack import cache_commit_hashes
from PaStA import config, patch_stack_list


def _evaluate_patch_list_wrapper(args):
    orig, cand = args
    return evaluate_patch_list(orig, cand)


def main():
    # Startup
    parser = argparse.ArgumentParser(description='Analyse stack by stack')
    parser.add_argument('-er', dest='evaluation_result_filename', metavar='filename',
                        default=config.evaluation_result, help='Evaluation result filename')
    parser.add_argument('-sp', dest='sp_filename', metavar='filename',
                        default=config.similar_patches, help='Similar Patches filename')
    args = parser.parse_args()

    # Load similar patches file
    similar_patches = EquivalenceClass.from_file(args.sp_filename, must_exist=True)

    # Iterate over similar patch list and get latest commit of patches
    sys.stdout.write('Determining patch stack representative system...')
    sys.stdout.flush()
    # Get the complete representative system
    # The lambda compares two patches of an equivalence class and chooses the one with
    # the later release version
    representatives = similar_patches.get_representative_system(
        lambda x, y: patch_stack_list.is_stack_version_greater(patch_stack_list.get_stack_of_commit(x),
                                                               patch_stack_list.get_stack_of_commit(y)))
    print(colored(' [done]', 'green'))

    # Cache commits
    cache_commit_hashes(representatives)

    evaluation_result = evaluate_patch_list(representatives,
                                            representatives,
                                            parallelize=True,
                                            verbose=True)
    evaluation_result.set_universe(representatives)
    evaluation_result.to_file(args.evaluation_result_filename)


if __name__ == '__main__':
    main()
